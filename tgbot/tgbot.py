import telebot
import gspread
import schedule
import time
import threading
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ Google Sheets
TELEGRAM_TOKEN = '7628160084:AAE8iY7EU35ifUD9gatgT3nCxxqjvggyvfc'
SHEET_ID = '11K7jqTTmo_dmtqAGU3DKaBo8i8yPNKz8Ml4Wba7weRI'
CHAT_ID = '-1002282721205'  # –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(credentials)
sheet = client.open_by_key(SHEET_ID).sheet1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_stats(date_str):
    try:
        data = sheet.get_all_values()
        headers = data[0]
        rows = data[1:]

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω–æ–π –¥–∞—Ç–æ–π
        stats_row = None
        for row in rows:
            if row[0] == date_str:
                stats_row = row
                break

        if not stats_row:
            return "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚ö†Ô∏è"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = (
            f"üìä *–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ñ–æ—Ç–æ—Å—Ç—É–¥–∏–∏ –∑–∞ {date_str}:*\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üì¶ –ü—Ä–∏–Ω—è—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤: *{stats_row[1]}*\n"
            f"üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: *{stats_row[2]}*\n"
            f"‚ùå –ë—Ä–∞–∫: *{stats_row[3]}*\n"
            f"üóø –ü—Ä–∏–Ω—è—Ç–æ –±–µ–∑ –∑–∞—è–≤–æ–∫: *{stats_row[4]}*\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–æ: *{stats_row[5]}*\n"
            f"üé® –û—Ç—Ä–µ—Ç—É—à–∏—Ä–æ–≤–∞–Ω–æ: *{stats_row[6]}*\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        )
        return response
    except Exception as e:
        return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
def send_daily_stats():
    today = datetime.now().strftime('%d.%m.%Y')
    stats_message = get_stats(today)

    max_retries = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
    for attempt in range(max_retries):
        try:
            bot.send_message(CHAT_ID, stats_message, parse_mode="Markdown")
            print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}")
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_retries}.")
            if attempt == max_retries - 1:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@bot.message_handler(commands=['stats'])
def send_stats(message):
    try:
        command = message.text.split()
        if len(command) != 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: stats dd.mm.yyyy")
            return

        date_str = command[1]
        try:
            datetime.strptime(date_str, '%d.%m.%Y')  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: dd.mm.yyyy")
            return

        stats_message = get_stats(date_str)
        bot.reply_to(message, stats_message, parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –ª–∏—Å—Ç–∞ TVD
def get_tvd_data(date_str):
    try:
        tvd_sheet = client.open_by_key(SHEET_ID).worksheet('TVD')
        data = tvd_sheet.get_all_values()
        headers = data[0]
        rows = data[1:]

        response = [f"*–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∑–∞ {date_str}:*\n"]
        for row in rows:
            if row[0] == date_str:
                stats = list(map(int, row[2:]))
                if all(value == 0 for value in stats):
                    continue

                response.append(
                    f"üë§ {row[1]}:\n"
                    f"  - –ü—Ä–∏–Ω—è—Ç–æ: *{row[2]}*\n"
                    f"  - –ü—Ä–∏–Ω—è—Ç–æ –±–µ–∑ –∑–∞—è–≤–æ–∫: *{row[3]}*\n"
                    f"  - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: *{row[4]}*\n"
                    f"  - –ë—Ä–∞–∫: *{row[5]}*\n"
                    f"  - –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∑–∞—è–≤–æ–∫: *{row[6]}*\n"
                    f"  - –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞—è–≤–∫–∏: *{row[7]}*\n"
                )

        if len(response) == 1:
            return f"‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞ {date_str} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –∏–º–µ–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–π."

        return "\n".join(response)
    except Exception as e:
        return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tvd
@bot.message_handler(commands=['tvd'])
def send_tvd_data(message):
    try:
        command = message.text.split()
        if len(command) != 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /tvd dd.mm.yyyy")
            return

        date_str = command[1]
        try:
            datetime.strptime(date_str, '%d.%m.%Y')  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: dd.mm.yyyy")
            return

        tvd_message = get_tvd_data(date_str)
        bot.reply_to(message, tvd_message, parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chatid
@bot.message_handler(commands=['chatid'])
def send_chatid(message):
    bot.reply_to(message, f"ID —á–∞—Ç–∞: {message.chat.id}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def scheduler_thread():
    schedule.every().day.at("20:30").do(send_daily_stats)
    while True:
        schedule.run_pending()
        time.sleep(1)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def run_bot():
    while True:
        try:
            bot.polling(none_stop=True, timeout=60, long_polling_timeout=60)
        except requests.exceptions.ReadTimeout:
            print("–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")

if __name__ == "__main__":
    scheduler = threading.Thread(target=scheduler_thread)
    scheduler.daemon = True
    scheduler.start()

    run_bot()
